// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wrpc.proto

#ifndef PROTOBUF_wrpc_2eproto__INCLUDED
#define PROTOBUF_wrpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace wrpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wrpc_2eproto();
void protobuf_AssignDesc_wrpc_2eproto();
void protobuf_ShutdownFile_wrpc_2eproto();

class RpcError;
class RpcRequest;
class RpcResponse;

// ===================================================================

class RpcError : public ::google::protobuf::Message {
 public:
  RpcError();
  virtual ~RpcError();
  
  RpcError(const RpcError& from);
  
  inline RpcError& operator=(const RpcError& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcError& default_instance();
  
  void Swap(RpcError* other);
  
  // implements Message ----------------------------------------------
  
  RpcError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcError& from);
  void MergeFrom(const RpcError& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);
  
  // optional string reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  
  // @@protoc_insertion_point(class_scope:wrpc.RpcError)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_reason();
  inline void clear_has_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* reason_;
  ::google::protobuf::int32 code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_wrpc_2eproto();
  friend void protobuf_AssignDesc_wrpc_2eproto();
  friend void protobuf_ShutdownFile_wrpc_2eproto();
  
  void InitAsDefaultInstance();
  static RpcError* default_instance_;
};
// -------------------------------------------------------------------

class RpcRequest : public ::google::protobuf::Message {
 public:
  RpcRequest();
  virtual ~RpcRequest();
  
  RpcRequest(const RpcRequest& from);
  
  inline RpcRequest& operator=(const RpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcRequest& default_instance();
  
  void Swap(RpcRequest* other);
  
  // implements Message ----------------------------------------------
  
  RpcRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcRequest& from);
  void MergeFrom(const RpcRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // required string service = 2;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 2;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const char* value, size_t size);
  inline ::std::string* mutable_service();
  inline ::std::string* release_service();
  
  // required string method = 3;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 3;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  
  // optional bytes req = 4;
  inline bool has_req() const;
  inline void clear_req();
  static const int kReqFieldNumber = 4;
  inline const ::std::string& req() const;
  inline void set_req(const ::std::string& value);
  inline void set_req(const char* value);
  inline void set_req(const void* value, size_t size);
  inline ::std::string* mutable_req();
  inline ::std::string* release_req();
  
  // @@protoc_insertion_point(class_scope:wrpc.RpcRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_req();
  inline void clear_has_req();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::std::string* service_;
  ::std::string* method_;
  ::std::string* req_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_wrpc_2eproto();
  friend void protobuf_AssignDesc_wrpc_2eproto();
  friend void protobuf_ShutdownFile_wrpc_2eproto();
  
  void InitAsDefaultInstance();
  static RpcRequest* default_instance_;
};
// -------------------------------------------------------------------

class RpcResponse : public ::google::protobuf::Message {
 public:
  RpcResponse();
  virtual ~RpcResponse();
  
  RpcResponse(const RpcResponse& from);
  
  inline RpcResponse& operator=(const RpcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResponse& default_instance();
  
  void Swap(RpcResponse* other);
  
  // implements Message ----------------------------------------------
  
  RpcResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcResponse& from);
  void MergeFrom(const RpcResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // required .wrpc.RpcError err = 2;
  inline bool has_err() const;
  inline void clear_err();
  static const int kErrFieldNumber = 2;
  inline const ::wrpc::RpcError& err() const;
  inline ::wrpc::RpcError* mutable_err();
  inline ::wrpc::RpcError* release_err();
  
  // optional bytes res = 3;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 3;
  inline const ::std::string& res() const;
  inline void set_res(const ::std::string& value);
  inline void set_res(const char* value);
  inline void set_res(const void* value, size_t size);
  inline ::std::string* mutable_res();
  inline ::std::string* release_res();
  
  // @@protoc_insertion_point(class_scope:wrpc.RpcResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_err();
  inline void clear_has_err();
  inline void set_has_res();
  inline void clear_has_res();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::wrpc::RpcError* err_;
  ::std::string* res_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_wrpc_2eproto();
  friend void protobuf_AssignDesc_wrpc_2eproto();
  friend void protobuf_ShutdownFile_wrpc_2eproto();
  
  void InitAsDefaultInstance();
  static RpcResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcError

// required int32 code = 1;
inline bool RpcError::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcError::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcError::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcError::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 RpcError::code() const {
  return code_;
}
inline void RpcError::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional string reason = 2;
inline bool RpcError::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcError::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcError::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcError::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& RpcError::reason() const {
  return *reason_;
}
inline void RpcError::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void RpcError::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void RpcError::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcError::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* RpcError::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RpcRequest

// required uint64 id = 1;
inline bool RpcRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcRequest::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 RpcRequest::id() const {
  return id_;
}
inline void RpcRequest::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required string service = 2;
inline bool RpcRequest::has_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcRequest::set_has_service() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcRequest::clear_has_service() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcRequest::clear_service() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    service_->clear();
  }
  clear_has_service();
}
inline const ::std::string& RpcRequest::service() const {
  return *service_;
}
inline void RpcRequest::set_service(const ::std::string& value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void RpcRequest::set_service(const char* value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void RpcRequest::set_service(const char* value, size_t size) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequest::mutable_service() {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  return service_;
}
inline ::std::string* RpcRequest::release_service() {
  clear_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_;
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string method = 3;
inline bool RpcRequest::has_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcRequest::set_has_method() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcRequest::clear_has_method() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcRequest::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& RpcRequest::method() const {
  return *method_;
}
inline void RpcRequest::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RpcRequest::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RpcRequest::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequest::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* RpcRequest::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes req = 4;
inline bool RpcRequest::has_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcRequest::set_has_req() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcRequest::clear_has_req() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcRequest::clear_req() {
  if (req_ != &::google::protobuf::internal::kEmptyString) {
    req_->clear();
  }
  clear_has_req();
}
inline const ::std::string& RpcRequest::req() const {
  return *req_;
}
inline void RpcRequest::set_req(const ::std::string& value) {
  set_has_req();
  if (req_ == &::google::protobuf::internal::kEmptyString) {
    req_ = new ::std::string;
  }
  req_->assign(value);
}
inline void RpcRequest::set_req(const char* value) {
  set_has_req();
  if (req_ == &::google::protobuf::internal::kEmptyString) {
    req_ = new ::std::string;
  }
  req_->assign(value);
}
inline void RpcRequest::set_req(const void* value, size_t size) {
  set_has_req();
  if (req_ == &::google::protobuf::internal::kEmptyString) {
    req_ = new ::std::string;
  }
  req_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequest::mutable_req() {
  set_has_req();
  if (req_ == &::google::protobuf::internal::kEmptyString) {
    req_ = new ::std::string;
  }
  return req_;
}
inline ::std::string* RpcRequest::release_req() {
  clear_has_req();
  if (req_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = req_;
    req_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RpcResponse

// required uint64 id = 1;
inline bool RpcResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcResponse::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 RpcResponse::id() const {
  return id_;
}
inline void RpcResponse::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required .wrpc.RpcError err = 2;
inline bool RpcResponse::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcResponse::set_has_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcResponse::clear_has_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcResponse::clear_err() {
  if (err_ != NULL) err_->::wrpc::RpcError::Clear();
  clear_has_err();
}
inline const ::wrpc::RpcError& RpcResponse::err() const {
  return err_ != NULL ? *err_ : *default_instance_->err_;
}
inline ::wrpc::RpcError* RpcResponse::mutable_err() {
  set_has_err();
  if (err_ == NULL) err_ = new ::wrpc::RpcError;
  return err_;
}
inline ::wrpc::RpcError* RpcResponse::release_err() {
  clear_has_err();
  ::wrpc::RpcError* temp = err_;
  err_ = NULL;
  return temp;
}

// optional bytes res = 3;
inline bool RpcResponse::has_res() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcResponse::set_has_res() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcResponse::clear_has_res() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcResponse::clear_res() {
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    res_->clear();
  }
  clear_has_res();
}
inline const ::std::string& RpcResponse::res() const {
  return *res_;
}
inline void RpcResponse::set_res(const ::std::string& value) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(value);
}
inline void RpcResponse::set_res(const char* value) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(value);
}
inline void RpcResponse::set_res(const void* value, size_t size) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResponse::mutable_res() {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  return res_;
}
inline ::std::string* RpcResponse::release_res() {
  clear_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_;
    res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wrpc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wrpc_2eproto__INCLUDED
