// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lcs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dragoon {

namespace {

const ::google::protobuf::Descriptor* CellMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TmsiMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TmsiMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UsrpMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsrpMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* NulMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NulMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AirTypeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AirTypeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GainMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GainMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AirType_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* LocaterService_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* UsrperService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_lcs_2eproto() {
  protobuf_AddDesc_lcs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lcs.proto");
  GOOGLE_CHECK(file != NULL);
  CellMessage_descriptor_ = file->message_type(0);
  static const int CellMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMessage, ant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMessage, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMessage, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMessage, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMessage, nb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMessage, lac_),
  };
  CellMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellMessage_descriptor_,
      CellMessage::default_instance_,
      CellMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellMessage));
  TmsiMessage_descriptor_ = file->message_type(1);
  static const int TmsiMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmsiMessage, ant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmsiMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmsiMessage, cell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmsiMessage, rssi_),
  };
  TmsiMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TmsiMessage_descriptor_,
      TmsiMessage::default_instance_,
      TmsiMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmsiMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TmsiMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TmsiMessage));
  UsrpMessage_descriptor_ = file->message_type(2);
  static const int UsrpMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrpMessage, ant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrpMessage, id_),
  };
  UsrpMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UsrpMessage_descriptor_,
      UsrpMessage::default_instance_,
      UsrpMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrpMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrpMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UsrpMessage));
  NulMessage_descriptor_ = file->message_type(3);
  static const int NulMessage_offsets_[1] = {
  };
  NulMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NulMessage_descriptor_,
      NulMessage::default_instance_,
      NulMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NulMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NulMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NulMessage));
  ResultMessage_descriptor_ = file->message_type(4);
  static const int ResultMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultMessage, r_),
  };
  ResultMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultMessage_descriptor_,
      ResultMessage::default_instance_,
      ResultMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultMessage));
  LogMessage_descriptor_ = file->message_type(5);
  static const int LogMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, ant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, error_),
  };
  LogMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogMessage_descriptor_,
      LogMessage::default_instance_,
      LogMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogMessage));
  AirTypeMessage_descriptor_ = file->message_type(6);
  static const int AirTypeMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirTypeMessage, type_),
  };
  AirTypeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AirTypeMessage_descriptor_,
      AirTypeMessage::default_instance_,
      AirTypeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirTypeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AirTypeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AirTypeMessage));
  GainMessage_descriptor_ = file->message_type(7);
  static const int GainMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainMessage, gain_),
  };
  GainMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GainMessage_descriptor_,
      GainMessage::default_instance_,
      GainMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GainMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GainMessage));
  AirType_descriptor_ = file->enum_type(0);
  LocaterService_descriptor_ = file->service(0);
  UsrperService_descriptor_ = file->service(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lcs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellMessage_descriptor_, &CellMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TmsiMessage_descriptor_, &TmsiMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UsrpMessage_descriptor_, &UsrpMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NulMessage_descriptor_, &NulMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultMessage_descriptor_, &ResultMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogMessage_descriptor_, &LogMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AirTypeMessage_descriptor_, &AirTypeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GainMessage_descriptor_, &GainMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lcs_2eproto() {
  delete CellMessage::default_instance_;
  delete CellMessage_reflection_;
  delete TmsiMessage::default_instance_;
  delete TmsiMessage_reflection_;
  delete UsrpMessage::default_instance_;
  delete UsrpMessage_reflection_;
  delete NulMessage::default_instance_;
  delete NulMessage_reflection_;
  delete ResultMessage::default_instance_;
  delete ResultMessage_reflection_;
  delete LogMessage::default_instance_;
  delete LogMessage_reflection_;
  delete AirTypeMessage::default_instance_;
  delete AirTypeMessage_reflection_;
  delete GainMessage::default_instance_;
  delete GainMessage_reflection_;
}

void protobuf_AddDesc_lcs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tlcs.proto\022\007dragoon\"l\n\013CellMessage\022\013\n\003a"
    "nt\030\001 \002(\005\022\n\n\002id\030\002 \002(\t\022\014\n\004freq\030\003 \002(\005\022\r\n\005in"
    "dex\030\004 \002(\005\022\016\n\006energy\030\005 \002(\005\022\n\n\002nb\030\006 \003(\t\022\013\n"
    "\003lac\030\007 \001(\t\"B\n\013TmsiMessage\022\013\n\003ant\030\001 \002(\005\022\n"
    "\n\002id\030\002 \002(\t\022\014\n\004cell\030\003 \002(\t\022\014\n\004rssi\030\004 \002(\005\"&"
    "\n\013UsrpMessage\022\013\n\003ant\030\001 \002(\005\022\n\n\002id\030\002 \002(\t\"\014"
    "\n\nNulMessage\"\032\n\rResultMessage\022\t\n\001r\030\001 \001(\005"
    "\"6\n\nLogMessage\022\013\n\003ant\030\001 \002(\005\022\014\n\004code\030\002 \002("
    "\005\022\r\n\005error\030\003 \001(\t\"0\n\016AirTypeMessage\022\036\n\004ty"
    "pe\030\001 \002(\0162\020.dragoon.AirType\"\033\n\013GainMessag"
    "e\022\014\n\004gain\030\001 \002(\001*8\n\007AirType\022\007\n\003GSM\020\000\022\t\n\005W"
    "CDMA\020\001\022\013\n\007TDSCDMA\020\002\022\014\n\010CDMA2000\020\0032\366\001\n\016Lo"
    "caterService\0228\n\010SendUsrp\022\024.dragoon.UsrpM"
    "essage\032\026.dragoon.ResultMessage\0228\n\010SendTm"
    "si\022\024.dragoon.TmsiMessage\032\026.dragoon.Resul"
    "tMessage\0228\n\010SendCell\022\024.dragoon.CellMessa"
    "ge\032\026.dragoon.ResultMessage\0226\n\007SendLog\022\023."
    "dragoon.LogMessage\032\026.dragoon.ResultMessa"
    "ge2\227\003\n\rUsrperService\0227\n\004Init\022\027.dragoon.A"
    "irTypeMessage\032\026.dragoon.ResultMessage\0227\n"
    "\010ScanCell\022\023.dragoon.NulMessage\032\026.dragoon"
    ".ResultMessage\0227\n\007SetGain\022\024.dragoon.Gain"
    "Message\032\026.dragoon.ResultMessage\0226\n\006Liste"
    "n\022\024.dragoon.CellMessage\032\026.dragoon.Result"
    "Message\0226\n\006Locate\022\024.dragoon.TmsiMessage\032"
    "\026.dragoon.ResultMessage\0223\n\004Stop\022\023.dragoo"
    "n.NulMessage\032\026.dragoon.ResultMessage\0226\n\007"
    "Release\022\023.dragoon.NulMessage\032\026.dragoon.R"
    "esultMessageB\003\200\001\001", 1137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lcs.proto", &protobuf_RegisterTypes);
  CellMessage::default_instance_ = new CellMessage();
  TmsiMessage::default_instance_ = new TmsiMessage();
  UsrpMessage::default_instance_ = new UsrpMessage();
  NulMessage::default_instance_ = new NulMessage();
  ResultMessage::default_instance_ = new ResultMessage();
  LogMessage::default_instance_ = new LogMessage();
  AirTypeMessage::default_instance_ = new AirTypeMessage();
  GainMessage::default_instance_ = new GainMessage();
  CellMessage::default_instance_->InitAsDefaultInstance();
  TmsiMessage::default_instance_->InitAsDefaultInstance();
  UsrpMessage::default_instance_->InitAsDefaultInstance();
  NulMessage::default_instance_->InitAsDefaultInstance();
  ResultMessage::default_instance_->InitAsDefaultInstance();
  LogMessage::default_instance_->InitAsDefaultInstance();
  AirTypeMessage::default_instance_->InitAsDefaultInstance();
  GainMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lcs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lcs_2eproto {
  StaticDescriptorInitializer_lcs_2eproto() {
    protobuf_AddDesc_lcs_2eproto();
  }
} static_descriptor_initializer_lcs_2eproto_;

const ::google::protobuf::EnumDescriptor* AirType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirType_descriptor_;
}
bool AirType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CellMessage::kAntFieldNumber;
const int CellMessage::kIdFieldNumber;
const int CellMessage::kFreqFieldNumber;
const int CellMessage::kIndexFieldNumber;
const int CellMessage::kEnergyFieldNumber;
const int CellMessage::kNbFieldNumber;
const int CellMessage::kLacFieldNumber;
#endif  // !_MSC_VER

CellMessage::CellMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellMessage::InitAsDefaultInstance() {
}

CellMessage::CellMessage(const CellMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellMessage::SharedCtor() {
  _cached_size_ = 0;
  ant_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  freq_ = 0;
  index_ = 0;
  energy_ = 0;
  lac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellMessage::~CellMessage() {
  SharedDtor();
}

void CellMessage::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (lac_ != &::google::protobuf::internal::kEmptyString) {
    delete lac_;
  }
  if (this != default_instance_) {
  }
}

void CellMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellMessage_descriptor_;
}

const CellMessage& CellMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lcs_2eproto();  return *default_instance_;
}

CellMessage* CellMessage::default_instance_ = NULL;

CellMessage* CellMessage::New() const {
  return new CellMessage;
}

void CellMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ant_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    freq_ = 0;
    index_ = 0;
    energy_ = 0;
    if (has_lac()) {
      if (lac_ != &::google::protobuf::internal::kEmptyString) {
        lac_->clear();
      }
    }
  }
  nb_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ant = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ant_)));
          set_has_ant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }
      
      // required string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freq;
        break;
      }
      
      // required int32 freq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }
      
      // required int32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_energy;
        break;
      }
      
      // required int32 energy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nb;
        break;
      }
      
      // repeated string nb = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nb(0).data(), this->nb(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nb;
        if (input->ExpectTag(58)) goto parse_lac;
        break;
      }
      
      // optional string lac = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lac().data(), this->lac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ant = 1;
  if (has_ant()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ant(), output);
  }
  
  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }
  
  // required int32 freq = 3;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->freq(), output);
  }
  
  // required int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }
  
  // required int32 energy = 5;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->energy(), output);
  }
  
  // repeated string nb = 6;
  for (int i = 0; i < this->nb_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->nb(i).data(), this->nb(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nb(i), output);
  }
  
  // optional string lac = 7;
  if (has_lac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lac().data(), this->lac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->lac(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ant = 1;
  if (has_ant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ant(), target);
  }
  
  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }
  
  // required int32 freq = 3;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->freq(), target);
  }
  
  // required int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }
  
  // required int32 energy = 5;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->energy(), target);
  }
  
  // repeated string nb = 6;
  for (int i = 0; i < this->nb_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nb(i).data(), this->nb(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->nb(i), target);
  }
  
  // optional string lac = 7;
  if (has_lac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lac().data(), this->lac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lac(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ant = 1;
    if (has_ant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ant());
    }
    
    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required int32 freq = 3;
    if (has_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freq());
    }
    
    // required int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required int32 energy = 5;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
    // optional string lac = 7;
    if (has_lac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lac());
    }
    
  }
  // repeated string nb = 6;
  total_size += 1 * this->nb_size();
  for (int i = 0; i < this->nb_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nb(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellMessage::MergeFrom(const CellMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  nb_.MergeFrom(from.nb_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ant()) {
      set_ant(from.ant());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_lac()) {
      set_lac(from.lac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellMessage::CopyFrom(const CellMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void CellMessage::Swap(CellMessage* other) {
  if (other != this) {
    std::swap(ant_, other->ant_);
    std::swap(id_, other->id_);
    std::swap(freq_, other->freq_);
    std::swap(index_, other->index_);
    std::swap(energy_, other->energy_);
    nb_.Swap(&other->nb_);
    std::swap(lac_, other->lac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellMessage_descriptor_;
  metadata.reflection = CellMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TmsiMessage::kAntFieldNumber;
const int TmsiMessage::kIdFieldNumber;
const int TmsiMessage::kCellFieldNumber;
const int TmsiMessage::kRssiFieldNumber;
#endif  // !_MSC_VER

TmsiMessage::TmsiMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TmsiMessage::InitAsDefaultInstance() {
}

TmsiMessage::TmsiMessage(const TmsiMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TmsiMessage::SharedCtor() {
  _cached_size_ = 0;
  ant_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cell_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rssi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TmsiMessage::~TmsiMessage() {
  SharedDtor();
}

void TmsiMessage::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (cell_ != &::google::protobuf::internal::kEmptyString) {
    delete cell_;
  }
  if (this != default_instance_) {
  }
}

void TmsiMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TmsiMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TmsiMessage_descriptor_;
}

const TmsiMessage& TmsiMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lcs_2eproto();  return *default_instance_;
}

TmsiMessage* TmsiMessage::default_instance_ = NULL;

TmsiMessage* TmsiMessage::New() const {
  return new TmsiMessage;
}

void TmsiMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ant_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_cell()) {
      if (cell_ != &::google::protobuf::internal::kEmptyString) {
        cell_->clear();
      }
    }
    rssi_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TmsiMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ant = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ant_)));
          set_has_ant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }
      
      // required string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cell;
        break;
      }
      
      // required string cell = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cell()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cell().data(), this->cell().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rssi;
        break;
      }
      
      // required int32 rssi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rssi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rssi_)));
          set_has_rssi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TmsiMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ant = 1;
  if (has_ant()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ant(), output);
  }
  
  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }
  
  // required string cell = 3;
  if (has_cell()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cell().data(), this->cell().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cell(), output);
  }
  
  // required int32 rssi = 4;
  if (has_rssi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rssi(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TmsiMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ant = 1;
  if (has_ant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ant(), target);
  }
  
  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }
  
  // required string cell = 3;
  if (has_cell()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cell().data(), this->cell().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cell(), target);
  }
  
  // required int32 rssi = 4;
  if (has_rssi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rssi(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TmsiMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ant = 1;
    if (has_ant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ant());
    }
    
    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required string cell = 3;
    if (has_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cell());
    }
    
    // required int32 rssi = 4;
    if (has_rssi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rssi());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TmsiMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TmsiMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TmsiMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TmsiMessage::MergeFrom(const TmsiMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ant()) {
      set_ant(from.ant());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cell()) {
      set_cell(from.cell());
    }
    if (from.has_rssi()) {
      set_rssi(from.rssi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TmsiMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TmsiMessage::CopyFrom(const TmsiMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TmsiMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void TmsiMessage::Swap(TmsiMessage* other) {
  if (other != this) {
    std::swap(ant_, other->ant_);
    std::swap(id_, other->id_);
    std::swap(cell_, other->cell_);
    std::swap(rssi_, other->rssi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TmsiMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TmsiMessage_descriptor_;
  metadata.reflection = TmsiMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UsrpMessage::kAntFieldNumber;
const int UsrpMessage::kIdFieldNumber;
#endif  // !_MSC_VER

UsrpMessage::UsrpMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UsrpMessage::InitAsDefaultInstance() {
}

UsrpMessage::UsrpMessage(const UsrpMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UsrpMessage::SharedCtor() {
  _cached_size_ = 0;
  ant_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsrpMessage::~UsrpMessage() {
  SharedDtor();
}

void UsrpMessage::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void UsrpMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsrpMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsrpMessage_descriptor_;
}

const UsrpMessage& UsrpMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lcs_2eproto();  return *default_instance_;
}

UsrpMessage* UsrpMessage::default_instance_ = NULL;

UsrpMessage* UsrpMessage::New() const {
  return new UsrpMessage;
}

void UsrpMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ant_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UsrpMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ant = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ant_)));
          set_has_ant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }
      
      // required string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UsrpMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ant = 1;
  if (has_ant()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ant(), output);
  }
  
  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UsrpMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ant = 1;
  if (has_ant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ant(), target);
  }
  
  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UsrpMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ant = 1;
    if (has_ant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ant());
    }
    
    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsrpMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UsrpMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UsrpMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UsrpMessage::MergeFrom(const UsrpMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ant()) {
      set_ant(from.ant());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UsrpMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsrpMessage::CopyFrom(const UsrpMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsrpMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UsrpMessage::Swap(UsrpMessage* other) {
  if (other != this) {
    std::swap(ant_, other->ant_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UsrpMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsrpMessage_descriptor_;
  metadata.reflection = UsrpMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NulMessage::NulMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NulMessage::InitAsDefaultInstance() {
}

NulMessage::NulMessage(const NulMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NulMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NulMessage::~NulMessage() {
  SharedDtor();
}

void NulMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NulMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NulMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NulMessage_descriptor_;
}

const NulMessage& NulMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lcs_2eproto();  return *default_instance_;
}

NulMessage* NulMessage::default_instance_ = NULL;

NulMessage* NulMessage::New() const {
  return new NulMessage;
}

void NulMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NulMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NulMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NulMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NulMessage::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NulMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NulMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NulMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NulMessage::MergeFrom(const NulMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NulMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NulMessage::CopyFrom(const NulMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NulMessage::IsInitialized() const {
  
  return true;
}

void NulMessage::Swap(NulMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NulMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NulMessage_descriptor_;
  metadata.reflection = NulMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResultMessage::kRFieldNumber;
#endif  // !_MSC_VER

ResultMessage::ResultMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultMessage::InitAsDefaultInstance() {
}

ResultMessage::ResultMessage(const ResultMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultMessage::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultMessage::~ResultMessage() {
  SharedDtor();
}

void ResultMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultMessage_descriptor_;
}

const ResultMessage& ResultMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lcs_2eproto();  return *default_instance_;
}

ResultMessage* ResultMessage::default_instance_ = NULL;

ResultMessage* ResultMessage::New() const {
  return new ResultMessage;
}

void ResultMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 r = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultMessage::MergeFrom(const ResultMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultMessage::CopyFrom(const ResultMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultMessage::IsInitialized() const {
  
  return true;
}

void ResultMessage::Swap(ResultMessage* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultMessage_descriptor_;
  metadata.reflection = ResultMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogMessage::kAntFieldNumber;
const int LogMessage::kCodeFieldNumber;
const int LogMessage::kErrorFieldNumber;
#endif  // !_MSC_VER

LogMessage::LogMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogMessage::InitAsDefaultInstance() {
}

LogMessage::LogMessage(const LogMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogMessage::SharedCtor() {
  _cached_size_ = 0;
  ant_ = 0;
  code_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogMessage::~LogMessage() {
  SharedDtor();
}

void LogMessage::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void LogMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogMessage_descriptor_;
}

const LogMessage& LogMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lcs_2eproto();  return *default_instance_;
}

LogMessage* LogMessage::default_instance_ = NULL;

LogMessage* LogMessage::New() const {
  return new LogMessage;
}

void LogMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ant_ = 0;
    code_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ant = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ant_)));
          set_has_ant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }
      
      // required int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }
      
      // optional string error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ant = 1;
  if (has_ant()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ant(), output);
  }
  
  // required int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }
  
  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ant = 1;
  if (has_ant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ant(), target);
  }
  
  // required int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }
  
  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ant = 1;
    if (has_ant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ant());
    }
    
    // required int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
    // optional string error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogMessage::MergeFrom(const LogMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ant()) {
      set_ant(from.ant());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogMessage::CopyFrom(const LogMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LogMessage::Swap(LogMessage* other) {
  if (other != this) {
    std::swap(ant_, other->ant_);
    std::swap(code_, other->code_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogMessage_descriptor_;
  metadata.reflection = LogMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AirTypeMessage::kTypeFieldNumber;
#endif  // !_MSC_VER

AirTypeMessage::AirTypeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AirTypeMessage::InitAsDefaultInstance() {
}

AirTypeMessage::AirTypeMessage(const AirTypeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AirTypeMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AirTypeMessage::~AirTypeMessage() {
  SharedDtor();
}

void AirTypeMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AirTypeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AirTypeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AirTypeMessage_descriptor_;
}

const AirTypeMessage& AirTypeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lcs_2eproto();  return *default_instance_;
}

AirTypeMessage* AirTypeMessage::default_instance_ = NULL;

AirTypeMessage* AirTypeMessage::New() const {
  return new AirTypeMessage;
}

void AirTypeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AirTypeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dragoon.AirType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dragoon::AirType_IsValid(value)) {
            set_type(static_cast< dragoon::AirType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AirTypeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .dragoon.AirType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AirTypeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .dragoon.AirType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AirTypeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dragoon.AirType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AirTypeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AirTypeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AirTypeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AirTypeMessage::MergeFrom(const AirTypeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AirTypeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirTypeMessage::CopyFrom(const AirTypeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirTypeMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AirTypeMessage::Swap(AirTypeMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AirTypeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AirTypeMessage_descriptor_;
  metadata.reflection = AirTypeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GainMessage::kGainFieldNumber;
#endif  // !_MSC_VER

GainMessage::GainMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GainMessage::InitAsDefaultInstance() {
}

GainMessage::GainMessage(const GainMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GainMessage::SharedCtor() {
  _cached_size_ = 0;
  gain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GainMessage::~GainMessage() {
  SharedDtor();
}

void GainMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GainMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GainMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GainMessage_descriptor_;
}

const GainMessage& GainMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lcs_2eproto();  return *default_instance_;
}

GainMessage* GainMessage::default_instance_ = NULL;

GainMessage* GainMessage::New() const {
  return new GainMessage;
}

void GainMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gain_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GainMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double gain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GainMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double gain = 1;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->gain(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GainMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double gain = 1;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->gain(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GainMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double gain = 1;
    if (has_gain()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GainMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GainMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GainMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GainMessage::MergeFrom(const GainMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gain()) {
      set_gain(from.gain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GainMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GainMessage::CopyFrom(const GainMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GainMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GainMessage::Swap(GainMessage* other) {
  if (other != this) {
    std::swap(gain_, other->gain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GainMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GainMessage_descriptor_;
  metadata.reflection = GainMessage_reflection_;
  return metadata;
}


// ===================================================================

LocaterService::~LocaterService() {}

const ::google::protobuf::ServiceDescriptor* LocaterService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocaterService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* LocaterService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocaterService_descriptor_;
}

void LocaterService::SendUsrp(::google::protobuf::RpcController* controller,
                         const ::dragoon::UsrpMessage*,
                         ::dragoon::ResultMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendUsrp() not implemented.");
  done->Run();
}

void LocaterService::SendTmsi(::google::protobuf::RpcController* controller,
                         const ::dragoon::TmsiMessage*,
                         ::dragoon::ResultMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendTmsi() not implemented.");
  done->Run();
}

void LocaterService::SendCell(::google::protobuf::RpcController* controller,
                         const ::dragoon::CellMessage*,
                         ::dragoon::ResultMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendCell() not implemented.");
  done->Run();
}

void LocaterService::SendLog(::google::protobuf::RpcController* controller,
                         const ::dragoon::LogMessage*,
                         ::dragoon::ResultMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendLog() not implemented.");
  done->Run();
}

void LocaterService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), LocaterService_descriptor_);
  switch(method->index()) {
    case 0:
      SendUsrp(controller,
             ::google::protobuf::down_cast<const ::dragoon::UsrpMessage*>(request),
             ::google::protobuf::down_cast< ::dragoon::ResultMessage*>(response),
             done);
      break;
    case 1:
      SendTmsi(controller,
             ::google::protobuf::down_cast<const ::dragoon::TmsiMessage*>(request),
             ::google::protobuf::down_cast< ::dragoon::ResultMessage*>(response),
             done);
      break;
    case 2:
      SendCell(controller,
             ::google::protobuf::down_cast<const ::dragoon::CellMessage*>(request),
             ::google::protobuf::down_cast< ::dragoon::ResultMessage*>(response),
             done);
      break;
    case 3:
      SendLog(controller,
             ::google::protobuf::down_cast<const ::dragoon::LogMessage*>(request),
             ::google::protobuf::down_cast< ::dragoon::ResultMessage*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& LocaterService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dragoon::UsrpMessage::default_instance();
    case 1:
      return ::dragoon::TmsiMessage::default_instance();
    case 2:
      return ::dragoon::CellMessage::default_instance();
    case 3:
      return ::dragoon::LogMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& LocaterService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dragoon::ResultMessage::default_instance();
    case 1:
      return ::dragoon::ResultMessage::default_instance();
    case 2:
      return ::dragoon::ResultMessage::default_instance();
    case 3:
      return ::dragoon::ResultMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

LocaterService_Stub::LocaterService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
LocaterService_Stub::LocaterService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
LocaterService_Stub::~LocaterService_Stub() {
  if (owns_channel_) delete channel_;
}

void LocaterService_Stub::SendUsrp(::google::protobuf::RpcController* controller,
                              const ::dragoon::UsrpMessage* request,
                              ::dragoon::ResultMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void LocaterService_Stub::SendTmsi(::google::protobuf::RpcController* controller,
                              const ::dragoon::TmsiMessage* request,
                              ::dragoon::ResultMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void LocaterService_Stub::SendCell(::google::protobuf::RpcController* controller,
                              const ::dragoon::CellMessage* request,
                              ::dragoon::ResultMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void LocaterService_Stub::SendLog(::google::protobuf::RpcController* controller,
                              const ::dragoon::LogMessage* request,
                              ::dragoon::ResultMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
// ===================================================================

UsrperService::~UsrperService() {}

const ::google::protobuf::ServiceDescriptor* UsrperService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsrperService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* UsrperService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsrperService_descriptor_;
}

void UsrperService::Init(::google::protobuf::RpcController* controller,
                         const ::dragoon::AirTypeMessage*,
                         ::dragoon::ResultMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Init() not implemented.");
  done->Run();
}

void UsrperService::ScanCell(::google::protobuf::RpcController* controller,
                         const ::dragoon::NulMessage*,
                         ::dragoon::ResultMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ScanCell() not implemented.");
  done->Run();
}

void UsrperService::SetGain(::google::protobuf::RpcController* controller,
                         const ::dragoon::GainMessage*,
                         ::dragoon::ResultMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetGain() not implemented.");
  done->Run();
}

void UsrperService::Listen(::google::protobuf::RpcController* controller,
                         const ::dragoon::CellMessage*,
                         ::dragoon::ResultMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Listen() not implemented.");
  done->Run();
}

void UsrperService::Locate(::google::protobuf::RpcController* controller,
                         const ::dragoon::TmsiMessage*,
                         ::dragoon::ResultMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Locate() not implemented.");
  done->Run();
}

void UsrperService::Stop(::google::protobuf::RpcController* controller,
                         const ::dragoon::NulMessage*,
                         ::dragoon::ResultMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Stop() not implemented.");
  done->Run();
}

void UsrperService::Release(::google::protobuf::RpcController* controller,
                         const ::dragoon::NulMessage*,
                         ::dragoon::ResultMessage*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Release() not implemented.");
  done->Run();
}

void UsrperService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), UsrperService_descriptor_);
  switch(method->index()) {
    case 0:
      Init(controller,
             ::google::protobuf::down_cast<const ::dragoon::AirTypeMessage*>(request),
             ::google::protobuf::down_cast< ::dragoon::ResultMessage*>(response),
             done);
      break;
    case 1:
      ScanCell(controller,
             ::google::protobuf::down_cast<const ::dragoon::NulMessage*>(request),
             ::google::protobuf::down_cast< ::dragoon::ResultMessage*>(response),
             done);
      break;
    case 2:
      SetGain(controller,
             ::google::protobuf::down_cast<const ::dragoon::GainMessage*>(request),
             ::google::protobuf::down_cast< ::dragoon::ResultMessage*>(response),
             done);
      break;
    case 3:
      Listen(controller,
             ::google::protobuf::down_cast<const ::dragoon::CellMessage*>(request),
             ::google::protobuf::down_cast< ::dragoon::ResultMessage*>(response),
             done);
      break;
    case 4:
      Locate(controller,
             ::google::protobuf::down_cast<const ::dragoon::TmsiMessage*>(request),
             ::google::protobuf::down_cast< ::dragoon::ResultMessage*>(response),
             done);
      break;
    case 5:
      Stop(controller,
             ::google::protobuf::down_cast<const ::dragoon::NulMessage*>(request),
             ::google::protobuf::down_cast< ::dragoon::ResultMessage*>(response),
             done);
      break;
    case 6:
      Release(controller,
             ::google::protobuf::down_cast<const ::dragoon::NulMessage*>(request),
             ::google::protobuf::down_cast< ::dragoon::ResultMessage*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& UsrperService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dragoon::AirTypeMessage::default_instance();
    case 1:
      return ::dragoon::NulMessage::default_instance();
    case 2:
      return ::dragoon::GainMessage::default_instance();
    case 3:
      return ::dragoon::CellMessage::default_instance();
    case 4:
      return ::dragoon::TmsiMessage::default_instance();
    case 5:
      return ::dragoon::NulMessage::default_instance();
    case 6:
      return ::dragoon::NulMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& UsrperService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dragoon::ResultMessage::default_instance();
    case 1:
      return ::dragoon::ResultMessage::default_instance();
    case 2:
      return ::dragoon::ResultMessage::default_instance();
    case 3:
      return ::dragoon::ResultMessage::default_instance();
    case 4:
      return ::dragoon::ResultMessage::default_instance();
    case 5:
      return ::dragoon::ResultMessage::default_instance();
    case 6:
      return ::dragoon::ResultMessage::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

UsrperService_Stub::UsrperService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UsrperService_Stub::UsrperService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
UsrperService_Stub::~UsrperService_Stub() {
  if (owns_channel_) delete channel_;
}

void UsrperService_Stub::Init(::google::protobuf::RpcController* controller,
                              const ::dragoon::AirTypeMessage* request,
                              ::dragoon::ResultMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UsrperService_Stub::ScanCell(::google::protobuf::RpcController* controller,
                              const ::dragoon::NulMessage* request,
                              ::dragoon::ResultMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void UsrperService_Stub::SetGain(::google::protobuf::RpcController* controller,
                              const ::dragoon::GainMessage* request,
                              ::dragoon::ResultMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void UsrperService_Stub::Listen(::google::protobuf::RpcController* controller,
                              const ::dragoon::CellMessage* request,
                              ::dragoon::ResultMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void UsrperService_Stub::Locate(::google::protobuf::RpcController* controller,
                              const ::dragoon::TmsiMessage* request,
                              ::dragoon::ResultMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void UsrperService_Stub::Stop(::google::protobuf::RpcController* controller,
                              const ::dragoon::NulMessage* request,
                              ::dragoon::ResultMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void UsrperService_Stub::Release(::google::protobuf::RpcController* controller,
                              const ::dragoon::NulMessage* request,
                              ::dragoon::ResultMessage* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace dragoon

// @@protoc_insertion_point(global_scope)
